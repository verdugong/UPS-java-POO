/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package visual;

import modelo.Guerrero;
import modelo.Mago;
import modelo.Personaje;
import java.awt.Image;
import java.net.URL;
import java.util.ArrayList;

import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sebas
 */
public class Clonados extends javax.swing.JInternalFrame {

    private Personajes personajes;

    /**
     * Creates new form Clonados
     */
    public Clonados(Personajes personajes) {
        initComponents();
        this.mostrarComponentes(false);
        this.personajes = personajes;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ComboBoxPersonajes = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnMostrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabelImagen = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Clonados"));

        ComboBoxPersonajes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personajes", "Guerreros", "Magos" }));
        ComboBoxPersonajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxPersonajesActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Encanto/Fuerza", "Nombre", "Habilidad", "Equipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("(Primero seleccionar un elemento de la lista y luego el botón Mostrar)");
        jScrollPane1.setViewportView(jTable1);

        btnMostrar.setText("Mostrar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Imagen1", "Imagen2", "Imagen3", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel1.setText("Nuevo Nombre:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel2.setText("Nueva Habilidad:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel3.setText("Personaje:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel4.setText("Fuerza/Encanto:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel5.setText("Nuevo Equipo:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        jLabel6.setText("(Primero seleccionar un elemento de la lista y luego el botón Mostrar)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComboBoxPersonajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnMostrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar)
                        .addGap(9, 9, 9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(209, 209, 209)
                                .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(jTextField2))))))
                        .addContainerGap(122, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnModificar)
                        .addGap(199, 199, 199))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 166, 166))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ComboBoxPersonajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMostrar)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(btnModificar)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminarPersonaje();
        jLabelImagen.setIcon(null);
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        this.mostrarComponentes(true);
        this.mostarImagen();
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void ComboBoxPersonajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxPersonajesActionPerformed

        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();

        if (opcionSeleccionada.equals("Guerreros")) {
            actualizarTablaGuerreros();
            this.mostrarComponentes(false);
            limpiarDatos();
        } else if (opcionSeleccionada.equals("Magos")) {
            actualizarTablaMagos();
            this.mostrarComponentes(false);
            limpiarDatos();
        }

        jLabelImagen.setIcon(null);
    }//GEN-LAST:event_ComboBoxPersonajesActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        this.modificarPersonaje();
        this.mostrarComponentes(false);
        limpiarDatos();
        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();

        if (opcionSeleccionada.equals("Guerreros")) {
            actualizarTablaGuerreros();
        } else if (opcionSeleccionada.equals("Magos")) {
            actualizarTablaMagos();
        }
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed
    private void mostarImagen() {

        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();

        if (opcionSeleccionada.equals("Guerreros")) {
            Guerrero g1 = (Guerrero) personajes.listaPersonajesClonadosGuerrero.get(jTable1.getSelectedRow());
            String rutaImagen = g1.getImagen();
            URL imageUrlG = getClass().getResource(rutaImagen);
            if (imageUrlG != null) {
                ImageIcon originalIconG = new ImageIcon(imageUrlG);
                ImageIcon iconG = new ImageIcon(originalIconG.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(iconG);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo cargar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (opcionSeleccionada.equals("Magos")) {
            Mago m1 = (Mago) personajes.listaPersonajesClonadosMago.get(jTable1.getSelectedRow());
            String rutaImagen = m1.getImagen();
            URL imageUrlM = getClass().getResource(rutaImagen);
            if (imageUrlM != null) {
                ImageIcon originalIconM = new ImageIcon(imageUrlM);
                ImageIcon iconM = new ImageIcon(originalIconM.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(iconM);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo cargar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void actualizarTablaGuerreros() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTable1.getModel();
        modelo.setNumRows(0);

        List<Personaje> listaPersonajesClonados = personajes.getListaPersonajesClonadosGuerrero();

        for (Personaje personajeClonado : listaPersonajesClonados) {
            if (personajeClonado instanceof Guerrero) {

                int fuerza = ((Guerrero) personajeClonado).getFuerza();
                String nombre = personajeClonado.getNombre();
                String habilidad = personajeClonado.getHabilidad();
                String equipo = personajeClonado.getEquipo();
                Object[] rowData = {fuerza, nombre, habilidad, equipo};
                modelo.addRow(rowData);
            }
        }

        this.jTable1.setModel(modelo);
    }

    private void actualizarTablaMagos() {
        DefaultTableModel modelo = (DefaultTableModel) this.jTable1.getModel();
        modelo.setNumRows(0);

        List<Personaje> listaPersonajesClonados = personajes.getListaPersonajesClonadosMago();

        for (Personaje personajeClonado : listaPersonajesClonados) {
            if (personajeClonado instanceof Mago) {

                String encanto = ((Mago) personajeClonado).getEncanto();
                String nombreM = personajeClonado.getNombre();
                String habilidad = personajeClonado.getHabilidad();
                String equipo = personajeClonado.getEquipo();
                Object[] rowData = {encanto, nombreM, habilidad, equipo};
                modelo.addRow(rowData);
            }
        }

        this.jTable1.setModel(modelo);
    }

    private void mostrarComponentes(Boolean mostrar) {
        jTextField1.setVisible(mostrar);
        jTextField2.setVisible(mostrar);
        jTextField3.setVisible(mostrar);
        jTextField4.setVisible(mostrar);
        jLabel1.setVisible(mostrar);
        jLabel2.setVisible(mostrar);
        jLabel3.setVisible(mostrar);
        jLabel4.setVisible(mostrar);
        jLabel5.setVisible(mostrar);
        jList1.setVisible(mostrar);
        btnModificar.setVisible(mostrar);
    }


    private void modificarPersonaje() {
        int indiceSeleccionado = jTable1.getSelectedRow();
        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();

        if (opcionSeleccionada.equals("Guerreros")) {
            Personaje personajeClonado = personajes.getListaPersonajesClonadosGuerrero().get(indiceSeleccionado);
            personajeClonado.setNombre(jTextField1.getText());
            personajeClonado.setEquipo(jTextField2.getText());
            personajeClonado.setHabilidad(jTextField3.getText());
            ((Guerrero) personajeClonado).setFuerza(Integer.parseInt(jTextField4.getText()));
            String opcion = jList1.getSelectedValue();
            if (opcion.equalsIgnoreCase("Imagen1")) {
                ImageIcon guerrero = new ImageIcon(getClass().getResource("/imagenes/guerrero1.jpg"));
                ImageIcon icon = new ImageIcon(guerrero.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/guerrero1.jpg";
                personajeClonado.setImagen(nuevaImagen);
            } else if (opcion.equalsIgnoreCase("Imagen2")) {
                ImageIcon guerrero = new ImageIcon(getClass().getResource("/imagenes/guerrero2.jpg"));
                ImageIcon icon = new ImageIcon(guerrero.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/guerrero2.jpg";
                personajeClonado.setImagen(nuevaImagen);
            } else if (opcion.equalsIgnoreCase("Imagen3")) {
                ImageIcon guerrero = new ImageIcon(getClass().getResource("/imagenes/guerrero3.png"));
                ImageIcon icon = new ImageIcon(guerrero.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/guerrero3.png";
                personajeClonado.setImagen(nuevaImagen);
            }
        } else if (opcionSeleccionada.equals("Magos")) {
            Personaje personajeClonado = personajes.getListaPersonajesClonadosMago().get(indiceSeleccionado);
            personajeClonado.setNombre(jTextField1.getText());
            personajeClonado.setEquipo(jTextField2.getText());
            personajeClonado.setHabilidad(jTextField3.getText());
            ((Mago) personajeClonado).setEncanto(jTextField4.getText());
            String opcion = jList1.getSelectedValue();
            if (opcion.equalsIgnoreCase("Imagen1")) {
                ImageIcon mago = new ImageIcon(getClass().getResource("/imagenes/mago2.png"));
                ImageIcon icon = new ImageIcon(mago.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/mago2.jpg";
                personajeClonado.setImagen(nuevaImagen);
            } else if (opcion.equalsIgnoreCase("Imagen2")) {
                ImageIcon mago = new ImageIcon(getClass().getResource("/imagenes/mago3.png"));
                ImageIcon icon = new ImageIcon(mago.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/mago3.jpg";
                personajeClonado.setImagen(nuevaImagen);
            } else if (opcion.equalsIgnoreCase("Imagen3")) {
                ImageIcon mago = new ImageIcon(getClass().getResource("/imagenes/mago4.png"));
                ImageIcon icon = new ImageIcon(mago.getImage().getScaledInstance(jLabelImagen.getWidth(), jLabelImagen.getHeight(), Image.SCALE_DEFAULT));
                jLabelImagen.setIcon(icon);
                String nuevaImagen = "/imagenes/mago4.png";
                personajeClonado.setImagen(nuevaImagen);
            }

        }
    }

    private void eliminarPersonaje() {
        int indiceSeleccionado = jTable1.getSelectedRow();
        String opcionSeleccionada = ComboBoxPersonajes.getSelectedItem().toString();
        if (opcionSeleccionada.equals("Guerreros")) {
            Guerrero personajeClonado = (Guerrero) personajes.getListaPersonajesClonadosGuerrero().get(indiceSeleccionado);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar este personaje clonado?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                personajes.getListaPersonajesClonadosGuerrero().remove(personajeClonado);
            }
            this.actualizarTablaGuerreros();
        } else if (opcionSeleccionada.equals("Magos")) {
            Mago personajeClonado = (Mago) personajes.getListaPersonajesClonadosMago().get(indiceSeleccionado);

            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas eliminar este personaje clonado?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                personajes.getListaPersonajesClonadosMago().remove(personajeClonado);
            }
            this.actualizarTablaMagos();
        }
    }
    
    private void limpiarDatos(){
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxPersonajes;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelImagen;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
